// file generated by Claude Sonnet 4.5
// Write a test that mocks the endpoint, but logs in the user successfully, and checks to see the value is in localstorage, then refreshes the page, then checks again
import {
  render,
  screen,
  fireEvent,
  waitFor,
  cleanup,
} from "@testing-library/react";
import { BrowserRouter } from "react-router-dom";
import axios from "axios";
import MockAdapter from "axios-mock-adapter";
import Login from "./Login";
import { AuthProvider } from "../../context/auth";
import toast from "react-hot-toast";
import { CartProvider } from "../../context/cart";
import { SearchProvider } from "../../context/search";

// Mock dependencies
jest.mock("react-hot-toast");

describe("Login Integration Tests - LocalStorage Persistence", () => {
  let mockAxios;

  beforeEach(() => {
    // Create a new mock adapter for axios
    mockAxios = new MockAdapter(axios);

    // Clear localStorage before each test
    localStorage.clear();

    // Clear all mocks
    jest.clearAllMocks();
  });

  afterEach(() => {
    // Restore axios and cleanup
    mockAxios.restore();
    cleanup();
    localStorage.clear();
  });

  test("should login user successfully, persist to localStorage, and maintain auth after page refresh", async () => {
    const mockLoginResponse = {
      success: true,
      message: "Login successful",
      user: {
        _id: "123",
        name: "Test User",
        email: "test@example.com",
        role: 0,
      },
      token: "mock-jwt-token-12345",
    };

    mockAxios.onPost("/api/v1/auth/login").reply(200, mockLoginResponse);

    const { unmount } = render(
      <BrowserRouter>
        <AuthProvider>
          <CartProvider>
            <SearchProvider>
              <Login />
            </SearchProvider>
          </CartProvider>
        </AuthProvider>
      </BrowserRouter>
    );

    // login
    const emailInput = screen.getByPlaceholderText(/enter your email/i);
    const passwordInput = screen.getByPlaceholderText(/enter your password/i);
    const loginButton = screen.getByRole("button", { name: /login/i });
    fireEvent.change(emailInput, { target: { value: "test@example.com" } });
    fireEvent.change(passwordInput, { target: { value: "password123" } });

    fireEvent.click(loginButton);

    // let the localstorage update
    await waitFor(() => {
      expect(mockAxios.history.post.length).toBe(1);
    });

    // Verify the request was made with correct data
    const requestData = JSON.parse(mockAxios.history.post[0].data);
    expect(requestData).toEqual({
      email: "test@example.com",
      password: "password123",
    });

    // Verify success toast was called
    await waitFor(() => {
      expect(toast.success).toHaveBeenCalledWith(
        "Login successful",
        expect.objectContaining({
          duration: 5000,
          icon: "üôè",
        })
      );
    });

    // check localStorage for auth data
    const storedAuth = localStorage.getItem("auth");
    expect(storedAuth).not.toBeNull();

    const parsedAuth = JSON.parse(storedAuth);
    expect(parsedAuth).toEqual(mockLoginResponse);
    expect(parsedAuth.user.email).toBe("test@example.com");
    expect(parsedAuth.token).toBe("mock-jwt-token-12345");

    // ""refresh""
    unmount();

    // "refresh" thru rerender
    const { rerender } = render(
      <BrowserRouter>
        <AuthProvider>
          <CartProvider>
            <SearchProvider>
              <Login />
            </SearchProvider>
          </CartProvider>
        </AuthProvider>
      </BrowserRouter>
    );

    // Check localStorage again after "refresh"
    const storedAuthAfterRefresh = localStorage.getItem("auth");
    expect(storedAuthAfterRefresh).not.toBeNull();

    const parsedAuthAfterRefresh = JSON.parse(storedAuthAfterRefresh);
    expect(parsedAuthAfterRefresh).toEqual(mockLoginResponse);
    expect(parsedAuthAfterRefresh.user.email).toBe("test@example.com");
    expect(parsedAuthAfterRefresh.token).toBe("mock-jwt-token-12345");

    // double check auth header
    // The AuthProvider useEffect should have set the Authorization header
    await waitFor(() => {
      expect(axios.defaults.headers.common["Authorization"]).toBe(
        "Bearer mock-jwt-token-12345"
      );
    });
  });

  test("should handle failed login and not persist to localStorage", async () => {
    // Mock failed login response
    mockAxios.onPost("/api/v1/auth/login").reply(401, {
      success: false,
      message: "Invalid email or password",
    });

    render(
      <BrowserRouter>
        <AuthProvider>
          <CartProvider>
            <SearchProvider>
              <Login />
            </SearchProvider>
          </CartProvider>
        </AuthProvider>
      </BrowserRouter>
    );

    // wrong pw
    const emailInput = screen.getByPlaceholderText(/enter your email/i);
    const passwordInput = screen.getByPlaceholderText(/enter your password/i);
    const loginButton = screen.getByRole("button", { name: /login/i });

    fireEvent.change(emailInput, { target: { value: "wrong@example.com" } });
    fireEvent.change(passwordInput, { target: { value: "wrongpassword" } });
    fireEvent.click(loginButton);

    await waitFor(() => {
      expect(mockAxios.history.post.length).toBe(1);
    });

    await waitFor(() => {
      expect(toast.error).toHaveBeenCalledWith("Invalid email or password");
    });

    // nothing stored
    const storedAuth = localStorage.getItem("auth");
    expect(storedAuth).toBeNull();
  });

  test("should maintain localStorage auth across multiple component mounts", async () => {
    // pretend we already logged in and this is in localstorage
    const existingAuth = {
      success: true,
      user: {
        _id: "456",
        name: "Existing User",
        email: "existing@example.com",
        role: 1,
      },
      token: "existing-token-67890",
    };
    localStorage.setItem("auth", JSON.stringify(existingAuth));

    // should read from localstorage
    const { unmount: unmount1 } = render(
      <BrowserRouter>
        <AuthProvider>
          <CartProvider>
            <SearchProvider>
              <Login />
            </SearchProvider>
          </CartProvider>
        </AuthProvider>
      </BrowserRouter>
    );

    // Verify localStorage still has the data
    let storedAuth = localStorage.getItem("auth");
    expect(JSON.parse(storedAuth)).toEqual(existingAuth);

    // refresg
    unmount1();

    const { unmount: unmount2 } = render(
      <BrowserRouter>
        <AuthProvider>
          <CartProvider>
            <SearchProvider>
              <Login />
            </SearchProvider>
          </CartProvider>
        </AuthProvider>
      </BrowserRouter>
    );

    storedAuth = localStorage.getItem("auth");
    expect(JSON.parse(storedAuth)).toEqual(existingAuth);

    await waitFor(() => {
      expect(axios.defaults.headers.common["Authorization"]).toBe(
        "Bearer existing-token-67890"
      );
    });

    unmount2();

    // refresh agn
    render(
      <BrowserRouter>
        <AuthProvider>
          <CartProvider>
            <SearchProvider>
              <Login />
            </SearchProvider>
          </CartProvider>
        </AuthProvider>
      </BrowserRouter>
    );

    storedAuth = localStorage.getItem("auth");
    expect(JSON.parse(storedAuth)).toEqual(existingAuth);
  });

  test("should clear localStorage after user logs out", async () => {
    const mockLoginResponse = {
      success: true,
      message: "Login successful",
      user: {
        _id: "789",
        name: "Logout Test User",
        email: "logout@example.com",
        role: 0,
      },
      token: "logout-test-token-99999",
    };

    mockAxios.onPost("/api/v1/auth/login").reply(200, mockLoginResponse);

    render(
      <BrowserRouter>
        <AuthProvider>
          <CartProvider>
            <SearchProvider>
              <Login />
            </SearchProvider>
          </CartProvider>
        </AuthProvider>
      </BrowserRouter>
    );

    // login
    const emailInput = screen.getByPlaceholderText(/enter your email/i);
    const passwordInput = screen.getByPlaceholderText(/enter your password/i);
    const loginButton = screen.getByRole("button", { name: /login/i });

    fireEvent.change(emailInput, { target: { value: "logout@example.com" } });
    fireEvent.change(passwordInput, { target: { value: "password123" } });
    fireEvent.click(loginButton);

    // need to wait for localstorage update
    await waitFor(() => {
      expect(mockAxios.history.post.length).toBe(1);
    });

    await waitFor(() => {
      expect(toast.success).toHaveBeenCalledWith(
        "Login successful",
        expect.objectContaining({
          duration: 5000,
          icon: "üôè",
        })
      );
    });

    await waitFor(() => {
      const storedAuth = localStorage.getItem("auth");
      expect(storedAuth).not.toBeNull();
      expect(JSON.parse(storedAuth)).toEqual(mockLoginResponse);
    });

    // Simulate logout by clearing auth context and localStorage
    // This mimics what the handleLogout function does in the Header component
    localStorage.removeItem("auth");

    // Verify localStorage is now cleared
    const storedAuth = localStorage.getItem("auth");
    expect(storedAuth).toBeNull();
  });
});
